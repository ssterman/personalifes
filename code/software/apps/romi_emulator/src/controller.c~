#include "controller.h"
#include <math.h>
#include <stdio.h>

#define SIMULATION true

#if SIMULATION
#include "simulatorFunctions.h"
#else
#include "kobukiSensorTypes.h"
#include "display.h"
#endif

// Configure initial state
static KobukiSensors_t sensors = {0};
static robot_state_t state = OFF;
static uint16_t last_encoder = 0;
static float distance_traveled = 0.0;

// You may need to add additional variables to keep track of state here

// Return distance traveled between two encoder values
static float measure_distance(uint16_t current_encoder,
                              uint16_t previous_encoder) {
  const float CONVERSION = 0.0006108;
  uint16_t ticks = current_encoder >= previous_encoder
    ? current_encoder - previous_encoder
    : current_encoder + (UINT16_MAX - previous_encoder);
  return CONVERSION * ticks;
}

static float measure_distance_reversed(uint16_t current_encoder,
                                       uint16_t previous_encoder) {
  // take the absolute value of ticks traveled before negating
  const float CONVERSION = 0.0006108;
  uint16_t ticks = current_encoder <= previous_encoder
    ? previous_encoder - current_encoder
    : previous_encoder + (UINT16_MAX - current_encoder);
  return -CONVERSION * ticks;
}

static bool is_bump(KobukiSensors_t *sensors) {
  return sensors->bumps_wheelDrops.bumpLeft
    || sensors->bumps_wheelDrops.bumpCenter
    || sensors->bumps_wheelDrops.bumpRight;
}

// Return true if a cliff has been seen
// Save information about which cliff
static bool check_and_save_bump(KobukiSensors_t* sensors, bool* obstacle_is_right) {
  // Your code here
}

// Return true if a cliff has been seen
// Save information about which cliff
static bool check_cliff(KobukiSensors_t* sensors, bool* cliff_is_right) {
  // Your code here
}

// Read accelerometer value and calculate and return tilt (along axis corresponding to climbing the hill)
static float read_tilt() {
  // Your code here
}


// Robot controller
// State machine running on robot_state_t state
// This is called in a while loop
robot_state_t controller(robot_state_t state) {

  kobukiSensorPoll(&sensors);
  nrf_delay_ms(1);
  float tilt = read_tilt();

    // handle states
    switch(state) {
      display_float((int)state);
      case OFF: {
        // transition logic
        if (is_button_pressed(&sensors)) {
          last_encoder = sensors.leftWheelEncoder;
          distance_traveled = 0.0;
          state = DRIVING;
        } else {
          // perform state-specific actions here
          display_write("OFF", DISPLAY_LINE_0);
          display_write("", DISPLAY_LINE_1);
          kobukiDriveDirect(0, 0);
          state = OFF;
        }
        break; // each case needs to end with break!
      }

      case DRIVING: {
        // transition logic
        if (is_button_pressed(&sensors)) {
          state = OFF;
        } else if (sensors.bumps_wheelDrops.bumpRight
            || sensors.bumps_wheelDrops.bumpCenter) {
          pre_dir_change();
          state = BACK_UP_LEFT;
        } else if (sensors.bumps_wheelDrops.bumpLeft) {
          pre_dir_change();
          state = BACK_UP_RIGHT;
        } else {
          // perform state-specific actions here
          display_write("DRIVING", DISPLAY_LINE_0);
          uint16_t curr_encoder = sensors.leftWheelEncoder;
          float value = measure_distance(curr_encoder, last_encoder);
          distance_traveled += value;
          last_encoder = curr_encoder;
          display_float(distance_traveled);
          if (distance_traveled >= 2) {
            lsm9ds1_start_gyro_integration();
            state = TURN_CW;
          } else {
            kobukiDriveDirect(75, 75);
            state = DRIVING;
          }
        }
        break; // each case needs to end with break!
      }

      // add other cases here
      case TURN_CW: {
        if (is_button_pressed(&sensors)) {
          lsm9ds1_stop_gyro_integration();
          state = OFF;
        } else if (sensors.bumps_wheelDrops.bumpRight
            || sensors.bumps_wheelDrops.bumpCenter) {
          lsm9ds1_stop_gyro_integration();
          pre_dir_change();
          state = BACK_UP_LEFT;
        } else if (sensors.bumps_wheelDrops.bumpLeft) {
          lsm9ds1_stop_gyro_integration();
          pre_dir_change();
          state = BACK_UP_RIGHT;
        } else {
          // returns angles in degrees, cw is negative
          float angle_turned = fabs(lsm9ds1_read_gyro_integration().z_axis);
          if (angle_turned >= 90) {
            lsm9ds1_stop_gyro_integration();
            pre_dir_change();
            state = DRIVING;
          } else {
            display_write("TURNING", DISPLAY_LINE_0);
            kobukiDriveDirect(40, -40);
            display_float(angle_turned);
            state = TURN_CW;
          }
        }
        break;
      }

      case BACK_UP_LEFT: {
        display_write("BACK UP LEFT", DISPLAY_LINE_0);
        if (is_button_pressed(&sensors)) {
    		  state = OFF;
  	    } 
        else {
    		  uint16_t curr_encoder = sensors.leftWheelEncoder;
    		  float value = measure_distance_reversed(curr_encoder, last_encoder);
    		  distance_traveled += value;
    		  last_encoder = curr_encoder;
    		  display_float(distance_traveled);
    
    		  if (distance_traveled <= -80) {
     	 	    display_write("distance less than -1", DISPLAY_LINE_0);
      		  lsm9ds1_start_gyro_integration();
      		  state = TURN_AWAY_LEFT;
      		  if (state == TURN_AWAY_LEFT) {
			         display_write("TURN_AWAY_LEFT", DISPLAY_LINE_0);
      		  } 
            else {
      			   kobukiDriveDirect(-50, -50);
      			   state = BACK_UP_LEFT;
    		    }
          }
  	    }
        break;
      }

      case BACK_UP_RIGHT: {
        display_write("BACK UP RIGHT", DISPLAY_LINE_0);
        if (is_button_pressed(&sensors)) {
    		  state = OFF;
  	    } 
        else {
    		  uint16_t curr_encoder = sensors.leftWheelEncoder;
    		  float value = measure_distance_reversed(curr_encoder, last_encoder);
    		  distance_traveled += value;
    		  last_encoder = curr_encoder;
    		  display_float(distance_traveled);
    
    		  if (distance_traveled <= -80) {
     	 	    display_write("distance less than -1", DISPLAY_LINE_0);
      		  lsm9ds1_start_gyro_integration();
      		  state = TURN_AWAY_RIGHT;
      		  if (state == TURN_AWAY_RIGHT) {
			         display_write("TURN_AWAY_LEFT", DISPLAY_LINE_0);
      		  } 
            else {
      			kobukiDriveDirect(-50, -50);
      			state = BACK_UP_RIGHT;
    		    }
  	      }
        }
        break;
      }

      case TURN_AWAY_LEFT: {
        if (is_button_pressed(&sensors)) {
          lsm9ds1_stop_gyro_integration();
          state = OFF;
        } else {
          float angle_turned = fabs(lsm9ds1_read_gyro_integration().z_axis);
          if (angle_turned >= 45) {
            lsm9ds1_stop_gyro_integration();
            pre_dir_change();
            state = DRIVING;
          } else {
            display_write("EVADING LEFT", DISPLAY_LINE_0);
            display_float(angle_turned);
            kobukiDriveDirect(-40, 40);
          }
        }
        break;
      }
      case TURN_AWAY_RIGHT: {
        if (is_button_pressed(&sensors)) {
          lsm9ds1_stop_gyro_integration();
          state = OFF;
        } else {
          float angle_turned = fabs(lsm9ds1_read_gyro_integration().z_axis);
          if (angle_turned >= 45) {
            lsm9ds1_stop_gyro_integration();
            pre_dir_change();
            state = DRIVING;
          } else {
            display_write("EVADING RIGHT", DISPLAY_LINE_0);
            display_float(angle_turned);
            kobukiDriveDirect(40, -40);
          }
        }
        break;
      }

    }
    return state;
}

void display_float(float v) {
  char buf [16];
  snprintf(buf, 16, "%f", v);
  display_write(buf, DISPLAY_LINE_1);
}

int i; 

void pre_dir_change() {
  // allow encoder momentum to stop
  display_write("PAUSING", DISPLAY_LINE_0);
  kobukiDriveDirect(0, 0);
  for (i = 0; i < 30; i++) {
    kobukiSensorPoll(&sensors);
    nrf_delay_ms(1);
  }
  distance_traveled = 0;
  last_encoder = sensors.leftWheelEncoder;
}


// void back_up_state(bool left) {
//   if (is_button_pressed(&sensors)) {
//     state = OFF;
//   } else {
//     uint16_t curr_encoder = sensors.leftWheelEncoder;
//     float value = measure_distance_reversed(curr_encoder, last_encoder);
//     distance_traveled += value;
//     last_encoder = curr_encoder;
//     display_float(distance_traveled);
    
//     if (distance_traveled <= -1) {
//       display_write("distance less than -1", DISPLAY_LINE_0);
//       lsm9ds1_start_gyro_integration();
//       state = left ? TURN_AWAY_LEFT : TURN_AWAY_RIGHT;
//       if (state == TURN_AWAY_LEFT) {
// 	display_write("TURN_AWAY_LEFT", DISPLAY_LINE_0);
//       }
//       else if (state == TURN_AWAY_RIGHT) {
// 	display_write("TURN_AWAY_RIGHT", DISPLAY_LINE_0);
//       }
//     } else {
//       kobukiDriveDirect(-50, -50);
//       state = left ? BACK_UP_LEFT : BACK_UP_RIGHT;
//     }
//   }
// }
